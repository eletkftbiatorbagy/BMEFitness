SET datestyle TO 'ISO, YMD';

CREATE USER bme
 PASSWORD 'fitness'
 NOSUPERUSER INHERIT NOCREATEDB NOCREATEROLE;

CREATE GROUP bme_group
   WITH USER bme; 
 
CREATE DATABASE bmefitness
   OWNER = bme_group
   ENCODING = 'UTF-8';

\c bmefitness

 
CREATE SCHEMA fitness
AUTHORIZATION bme_group;  

CREATE TABLE fitness.preferences
(
	nev varchar,
	cim varchar,
	telefon varchar(20),
	email varchar(30),
	max_elofoglalas_nap integer
);
ALTER TABLE fitness.preferences OWNER TO bme_group;

CREATE TABLE fitness.felhasznalok
( 
id serial,
username varchar(20),
status integer DEFAULT 3,
foglalas integer DEFAULT 0,
nemjott integer DEFAULT 0,
visszamondas integer DEFAULT 0,
jelszo varchar(32),
aktiv boolean DEFAULT false,
root boolean DEFAULT false,
sysop boolean DEFAULT false,
lastlogin timestamp,
nem integer DEFAULT 0,
vnev varchar(30),
knev varchar(30),
varos varchar(30),
cim varchar(50),
irsz varchar(8),
tel varchar(20),
ev varchar(4) DEFAULT 0,
ho varchar(2) DEFAULT 0,
nap varchar(2) DEFAULT 0,
hirlevel boolean DEFAULT false,
email varchar(30),
avatar varchar(15) DEFAULT '',
keparany integer DEFAULT 1,
regisztracio timestamp,
forum boolean DEFAULT true,
CONSTRAINT felhasznalok_pk PRIMARY KEY(id)
);
ALTER TABLE fitness.felhasznalok OWNER TO bme_group;


CREATE TABLE fitness.info
(
	bemutatkozas varchar,
	hazirend varchar,
	nyitvatartas varchar,
	terkep varchar
);
ALTER TABLE fitness.info OWNER TO bme_group;

CREATE TABLE fitness.termek
(
	id serial,
	sorszam integer,
	nev varchar(20),
	alcim varchar(20),
	foglalhato boolean DEFAULT false,
	CONSTRAINT termek_pk PRIMARY KEY(id)
);
ALTER TABLE fitness.termek OWNER TO bme_group;

CREATE TABLE fitness.orak
(
	id serial,
	sorszam integer,
	foto varchar(8),
	logo varchar(8),
	nev varchar(25),
	rovid_nev varchar(10),
	alcim varchar(30),
	leiras varchar,
	perc integer,
	belepodij boolean DEFAULT false,
	max_letszam integer DEFAULT 0,
	color varchar(6),
	aktiv boolean DEFAULT true,
	listazas boolean DEFAULT true,
	CONSTRAINT orak_pk PRIMARY KEY(id)
);
ALTER TABLE fitness.orak OWNER TO bme_group;

CREATE TABLE fitness.edzok
(
	id serial,
	sorszam integer,
	foto varchar(8),
	vnev varchar(30),
	knev varchar(30),
	rovid_nev varchar(10),
	alcim varchar(30),
	leiras varchar,
	ertekeles integer,
	aktiv boolean DEFAULT true,
	CONSTRAINT edzok_pk PRIMARY KEY(id)
);
ALTER TABLE fitness.edzok OWNER TO bme_group;

CREATE TABLE fitness.naptar
(
	id serial,
	aktiv boolean DEFAULT true,
	torolve boolean DEFAULT false,
	torolve_mikor timestamp,
	torolve_id integer,
	tol timestamp,
	ig  timestamp,
	ismetlodes integer DEFAULT 0,
	parent_id integer DEFAULT 0,
	ora integer,
	edzo integer,
	resztvevok integer[],
	berlo integer,
	OK integer DEFAULT 0,
	visszaigazolva timestamp,
	visszaigazolta integer,
	meghivottak integer[],
	letrehozva timestamp,
	terem integer,
	CONSTRAINT naptar_pk PRIMARY KEY(id)
);
ALTER TABLE fitness.naptar OWNER TO bme_group;

CREATE TABLE fitness.forum
(
	id serial,
	felhasznalo integer,
	datum timestamp,
	szoveg varchar(100),
	valasz integer DEFAULT 0,
	CONSTRAINT forum_pk PRIMARY KEY(id)
);
ALTER TABLE fitness.forum OWNER TO bme_group;

CREATE TABLE fitness.kepek
(
   id serial, 
   hash character varying(32), 
   CONSTRAINT kepek_pm PRIMARY KEY (id)
);
ALTER TABLE fitness.kepek OWNER TO bme_group;



CREATE OR REPLACE FUNCTION fitness.zero_if_null(ertek integer)
  RETURNS integer AS
$BODY$BEGIN
IF ertek is null THEN
return 0;
ELSE
return ertek;
END IF;
END$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION fitness.zero_if_null(integer)
  OWNER TO bme_group;
  
  
  
  
CREATE OR REPLACE FUNCTION fitness.update_sorszam(atable regclass, aid integer, ujsorszam integer)
  RETURNS boolean AS
$BODY$DECLARE
	asorszam integer;
BEGIN
	IF ujsorszam < 1 THEN
		return false;
	END IF;

	EXECUTE 'SELECT sorszam FROM ' || atable || ' WHERE id = ' || aid INTO asorszam;
	IF asorszam IS NULL OR asorszam = 0 THEN
		return false;
	END IF;

	IF asorszam = ujsorszam THEN
		return false;
	END IF;

	IF asorszam < ujsorszam THEN
		BEGIN
			EXECUTE 'UPDATE ' || atable || ' SET sorszam = sorszam - 1 WHERE sorszam <= ' || ujsorszam || ' AND sorszam > ' || asorszam;
		END;
	ELSE
		BEGIN
			EXECUTE 'UPDATE ' || atable || ' SET sorszam = sorszam + 1 WHERE sorszam >= ' || ujsorszam || ' AND sorszam < ' || asorszam;
		END;
	END IF;
	EXECUTE 'UPDATE ' || atable || ' SET sorszam = ' || ujsorszam || ' WHERE id = ' || aid;
	return true;
END;$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION fitness.update_sorszam(regclass, integer, integer)
  OWNER TO bme_group;

  
